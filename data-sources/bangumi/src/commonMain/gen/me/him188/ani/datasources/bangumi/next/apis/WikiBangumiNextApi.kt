/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package me.him188.ani.datasources.bangumi.next.apis

import me.him188.ani.datasources.bangumi.next.models.BangumiNextEpisodeWikiInfo
import me.him188.ani.datasources.bangumi.next.models.BangumiNextErrorResponse
import me.him188.ani.datasources.bangumi.next.models.BangumiNextHistorySummary
import me.him188.ani.datasources.bangumi.next.models.BangumiNextListSubjectCovers200Response
import me.him188.ani.datasources.bangumi.next.models.BangumiNextPatchEpisodeWikiInfoRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextPatchSubjectInfoRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextPutSubjectInfoRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextSubjectWikiInfo
import me.him188.ani.datasources.bangumi.next.models.BangumiNextUploadSubjectCoverRequest

import me.him188.ani.datasources.bangumi.next.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class WikiBangumiNextApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer,
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     *
     *
     * @param episodeID
     * @return BangumiNextEpisodeWikiInfo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getEpisodeWikiInfo(episodeID: kotlin.Int): HttpResponse<BangumiNextEpisodeWikiInfo> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/wiki/ep/{episodeID}".replace("{" + "episodeID" + "}", "$episodeID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param subjectID
     * @return BangumiNextListSubjectCovers200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listSubjectCovers(subjectID: kotlin.Int): HttpResponse<BangumiNextListSubjectCovers200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/wiki/subjects/{subjectID}/covers".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param episodeID
     * @param bangumiNextPatchEpisodeWikiInfoRequest
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchEpisodeWikiInfo(
        episodeID: kotlin.Int,
        bangumiNextPatchEpisodeWikiInfoRequest: BangumiNextPatchEpisodeWikiInfoRequest
    ): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextPatchEpisodeWikiInfoRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/p1/wiki/ep/{episodeID}".replace("{" + "episodeID" + "}", "$episodeID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     * 暂时只能修改沙盒条目 184017,309445,354667,354677,363612
     * @param subjectID
     * @param bangumiNextPatchSubjectInfoRequest
     * @return void
     */
    open suspend fun patchSubjectInfo(
        subjectID: kotlin.Int,
        bangumiNextPatchSubjectInfoRequest: BangumiNextPatchSubjectInfoRequest
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextPatchSubjectInfoRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/p1/wiki/subjects/{subjectID}".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     * 暂时只能修改沙盒条目 184017,309445,354667,354677,363612  需要 &#x60;subjectWikiEdit&#x60; 权限
     * @param subjectID
     * @param bangumiNextPutSubjectInfoRequest
     * @return void
     */
    open suspend fun putSubjectInfo(
        subjectID: kotlin.Int,
        bangumiNextPutSubjectInfoRequest: BangumiNextPutSubjectInfoRequest
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextPutSubjectInfoRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/p1/wiki/subjects/{subjectID}".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     * 获取当前的 wiki 信息  暂时只能修改沙盒条目 184017, 309445, 354667, 354677, 363612
     * @param subjectID
     * @return kotlin.collections.List<BangumiNextHistorySummary>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun subjectEditHistorySummary(subjectID: kotlin.Int): HttpResponse<kotlin.collections.List<BangumiNextHistorySummary>> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/wiki/subjects/{subjectID}/history-summary".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap<SubjectEditHistorySummaryResponse>().map { value }
    }

    @Serializable(SubjectEditHistorySummaryResponse.Companion::class)
    private class SubjectEditHistorySummaryResponse(val value: List<BangumiNextHistorySummary>) {
        companion object : KSerializer<SubjectEditHistorySummaryResponse> {
            private val serializer: KSerializer<List<BangumiNextHistorySummary>> =
                serializer<List<BangumiNextHistorySummary>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SubjectEditHistorySummaryResponse) =
                serializer.serialize(encoder, obj.value)

            override fun deserialize(decoder: Decoder) =
                SubjectEditHistorySummaryResponse(serializer.deserialize(decoder))
        }
    }

    /**
     *
     * 获取当前的 wiki 信息  暂时只能修改沙盒条目 184017, 309445, 354667, 354677, 363612
     * @param subjectID
     * @return BangumiNextSubjectWikiInfo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun subjectInfo(subjectID: kotlin.Int): HttpResponse<BangumiNextSubjectWikiInfo> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/wiki/subjects/{subjectID}".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     * 撤消条目封面投票
     * 需要 &#x60;subjectWikiEdit&#x60; 权限
     * @param subjectID
     * @param imageID
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun unvoteSubjectCover(subjectID: kotlin.Int, imageID: kotlin.Int): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote".replace("{" + "subjectID" + "}", "$subjectID")
                .replace("{" + "imageID" + "}", "$imageID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     * 需要 &#x60;subjectWikiEdit&#x60; 权限
     * @param subjectID
     * @param bangumiNextUploadSubjectCoverRequest
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun uploadSubjectCover(
        subjectID: kotlin.Int,
        bangumiNextUploadSubjectCoverRequest: BangumiNextUploadSubjectCoverRequest
    ): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = bangumiNextUploadSubjectCoverRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/p1/wiki/subjects/{subjectID}/covers".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     * 为条目封面投票
     * 需要 &#x60;subjectWikiEdit&#x60; 权限
     * @param subjectID
     * @param imageID
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun voteSubjectCover(subjectID: kotlin.Int, imageID: kotlin.Int): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/p1/wiki/subjects/{subjectID}/covers/{imageID}/vote".replace("{" + "subjectID" + "}", "$subjectID")
                .replace("{" + "imageID" + "}", "$imageID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


}
