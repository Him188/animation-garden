name: Build


on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

jobs:
  build:
    name: "${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - ubuntu-20.04
          - macos-12 # x86_64
          - macos-14 # aarch64
        include:
          - os: windows-2022
            name: Windows x86_64
            uploadApk: false
            arch: x64
          - os: ubuntu-20.04
            name: Ubuntu x86_64
            uploadApk: false
            arch: x64
          - os: macos-12
            name: macOS x86_64
            uploadApk: false
            arch: x64
          - os: macos-14
            name: macOS aarch64
            uploadApk: true
            arch: aarch64
    env:
      enableLocalPublishingTest: 'false'
      gradleArgs: >-
        --scan
        "-Dorg.gradle.jvmargs=-Xmx4096m" 
        "-Dfile.encoding=UTF-8"
        --no-configuration-cache 
        "-Pbangumi.oauth.client.android.appId=${{ secrets.BANGUMI_OAUTH_CLIENT_ANDROID_ID }}" 
        "-Pbangumi.oauth.client.android.secret=${{ secrets.BANGUMI_OAUTH_CLIENT_ANDROID_SECRET }}"
        "-Pbangumi.oauth.client.desktop.appId=${{ secrets.BANGUMI_OAUTH_CLIENT_DESKTOP_ID }}" 
        "-Pbangumi.oauth.client.desktop.secret=${{ secrets.BANGUMI_OAUTH_CLIENT_DESKTOP_SECRET }}"

      # envs are strings, so check for 'true' or 'false'
      isMac: ${{ startsWith(matrix.os, 'macos') }}
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}
      doSigning: ${{ github.event_name != 'pull_request' && github.repository == 'open-api/ani' }} # fork 和 PR 不使用签名
      uploadApk: ${{ matrix.uploadApk == 'true' || matrix.uploadApk == true }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17
          architecture: ${{ matrix.arch }}

      - if: ${{ env.isMac == 'true' && matrix.arch == 'aarch64' }}
        name: Install Native Dependencies
        run: chmod +x ./ci-helper/install-deps-macos-aarch64.sh && ./ci-helper/install-deps-macos-aarch64.sh
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - if: ${{ env.isUnix == 'true' }}
        run: chmod -R 777 *

      - name: Clean and download dependencies
        run: ./gradlew clean ${{ env.gradleArgs }}

      - name: Update version name
        run: ./gradlew updateDevVersionNameFromGit ${{ env.gradleArgs }}

      - name: Explicitly generate Compose resources
        run: ./gradlew generateComposeResClass ${{ env.gradleArgs }}

      - if: ${{ env.isMac == 'true' }}
        name: Prepare signing key
        id: android_signing_key
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'android_signing_key'
          fileDir: './'
          encodedString: ${{ secrets.SIGNING_RELEASE_STOREFILE }}
        continue-on-error: true

      - name: Assemble
        run: ./gradlew assemble ${{ env.gradleArgs }}

      - if: ${{ env.uploadApk == 'true' && env.doSigning == 'true' }}
        name: Build Android APK
        run: ./gradlew assembleRelease ${{ env.gradleArgs }}
        env:
          "signing_release_storeFileFromRoot": ${{ steps.android_signing_key.outputs.filePath }}
          "signing_release_storePassword": ${{ secrets.SIGNING_RELEASE_STOREPASSWORD }}
          "signing_release_keyAlias": ${{ secrets.SIGNING_RELEASE_KEYALIAS }}
          "signing_release_keyPassword": ${{ secrets.SIGNING_RELEASE_KEYPASSWORD }}

      - if: ${{ env.uploadApk == 'true' }}
        name: Upload Android APK packages
        uses: actions/upload-artifact@v4
        with:
          name: ani-android
          path: app/android/build/outputs/apk/release/android-release.apk

      - name: Check
        run: ./gradlew check ${{ env.gradleArgs }}

      - name: Package
        run: ./gradlew createDistributable ${{ env.gradleArgs }}
      
      #        continue-on-error: true

      #      - if: ${{ env.isMac == 'true' }}
      #        name: Upload error logs
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: errors-${{ matrix.os }}
      #          path: desktop/build/compose/logs/
      #        continue-on-error: true

      - if: ${{ env.isMac == 'true' }}
        name: Upload macOS packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-macos
          path: desktop/build/compose/binaries/main/app

      - if: ${{ env.isMac == 'true' }}
        name: Upload macOS packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-macos-installer
          path: desktop/build/compose/binaries/main/dmg

      - if: ${{ env.isUbuntu == 'true' }}
        name: Upload Linux packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-linux
          path: desktop/build/compose/binaries/main/app

      - if: ${{ env.isUbuntu == 'true' }}
        name: Upload Linux packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-ubuntu-installer
          path: desktop/build/compose/binaries/main/deb

      - if: ${{ env.isUbuntu == 'true' }}
        name: Upload Linux packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-redhat-installer
          path: desktop/build/compose/binaries/main/rpm

      - if: ${{ env.isWindows == 'true' }}
        name: Upload Windows packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-windows
          path: desktop/build/compose/binaries/main/app
