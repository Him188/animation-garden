/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package me.him188.ani.datasources.bangumi.next.apis

import me.him188.ani.datasources.bangumi.next.models.BangumiNextBasicReply
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCreateGroupReplyRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCreateNewGroupTopic200Response
import me.him188.ani.datasources.bangumi.next.models.BangumiNextEditGroupPostRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextErrorResponse
import me.him188.ani.datasources.bangumi.next.models.BangumiNextGroupReply
import me.him188.ani.datasources.bangumi.next.models.BangumiNextTopicCreation

import me.him188.ani.datasources.bangumi.next.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class GroupBangumiNextApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer,
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     *
     *
     * @param topicID
     * @param bangumiNextCreateGroupReplyRequest
     * @return BangumiNextBasicReply
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createGroupReply(
        topicID: kotlin.Int,
        bangumiNextCreateGroupReplyRequest: BangumiNextCreateGroupReplyRequest
    ): HttpResponse<BangumiNextBasicReply> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextCreateGroupReplyRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/p1/groups/-/topics/{topicID}/replies".replace("{" + "topicID" + "}", "$topicID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param groupName
     * @param bangumiNextTopicCreation  (optional)
     * @return BangumiNextCreateNewGroupTopic200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createNewGroupTopic(
        groupName: kotlin.String,
        bangumiNextTopicCreation: BangumiNextTopicCreation? = null
    ): HttpResponse<BangumiNextCreateNewGroupTopic200Response> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextTopicCreation

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/p1/groups/{groupName}/topics".replace("{" + "groupName" + "}", "$groupName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param postID
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteGroupPost(postID: kotlin.Int): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/p1/groups/-/posts/{postID}".replace("{" + "postID" + "}", "$postID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param postID
     * @param bangumiNextEditGroupPostRequest
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun editGroupPost(
        postID: kotlin.Int,
        bangumiNextEditGroupPostRequest: BangumiNextEditGroupPostRequest
    ): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextEditGroupPostRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/p1/groups/-/posts/{postID}".replace("{" + "postID" + "}", "$postID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param topicID
     * @param bangumiNextTopicCreation  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun editGroupTopic(
        topicID: kotlin.Int,
        bangumiNextTopicCreation: BangumiNextTopicCreation? = null
    ): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody = bangumiNextTopicCreation

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/p1/groups/-/topics/{topicID}".replace("{" + "topicID" + "}", "$topicID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     *
     *
     * @param postID
     * @return BangumiNextGroupReply
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGroupPost(postID: kotlin.Int): HttpResponse<BangumiNextGroupReply> {

        val localVariableAuthNames = listOf<String>("CookiesSession")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/groups/-/posts/{postID}".replace("{" + "postID" + "}", "$postID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


}
